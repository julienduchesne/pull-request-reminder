// Code generated by MockGen. DO NOT EDIT.
// Source: hosts/hosts.go

// Package hosts is a generated GoMock package.
package hosts

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/julienduchesne/pull-request-reminder/config"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetHost mocks base method
func (m *MockRepository) GetHost() Host {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(Host)
	return ret0
}

// GetHost indicates an expected call of GetHost
func (mr *MockRepositoryMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockRepository)(nil).GetHost))
}

// GetLink mocks base method
func (m *MockRepository) GetLink() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLink")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLink indicates an expected call of GetLink
func (mr *MockRepositoryMockRecorder) GetLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLink", reflect.TypeOf((*MockRepository)(nil).GetLink))
}

// GetName mocks base method
func (m *MockRepository) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockRepositoryMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockRepository)(nil).GetName))
}

// GetPullRequestsToDisplay mocks base method
func (m *MockRepository) GetPullRequestsToDisplay() ([]*PullRequest, []*PullRequest) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestsToDisplay")
	ret0, _ := ret[0].([]*PullRequest)
	ret1, _ := ret[1].([]*PullRequest)
	return ret0, ret1
}

// GetPullRequestsToDisplay indicates an expected call of GetPullRequestsToDisplay
func (mr *MockRepositoryMockRecorder) GetPullRequestsToDisplay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestsToDisplay", reflect.TypeOf((*MockRepository)(nil).GetPullRequestsToDisplay))
}

// HasPullRequestsToDisplay mocks base method
func (m *MockRepository) HasPullRequestsToDisplay() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPullRequestsToDisplay")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPullRequestsToDisplay indicates an expected call of HasPullRequestsToDisplay
func (mr *MockRepositoryMockRecorder) HasPullRequestsToDisplay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPullRequestsToDisplay", reflect.TypeOf((*MockRepository)(nil).HasPullRequestsToDisplay))
}

// MockHost is a mock of Host interface
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
}

// MockHostMockRecorder is the mock recorder for MockHost
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockHost) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockHostMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockHost)(nil).GetName))
}

// GetRepositories mocks base method
func (m *MockHost) GetRepositories() []Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositories")
	ret0, _ := ret[0].([]Repository)
	return ret0
}

// GetRepositories indicates an expected call of GetRepositories
func (mr *MockHostMockRecorder) GetRepositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositories", reflect.TypeOf((*MockHost)(nil).GetRepositories))
}

// GetUsers mocks base method
func (m *MockHost) GetUsers() map[string]config.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(map[string]config.User)
	return ret0
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockHostMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockHost)(nil).GetUsers))
}
